package com.example.demo.controllertest;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.example.Task2.service.StudentService;
import com.example.demo.controller.StudentController;
import com.example.demo.entity.Student;

@RunWith(MockitoJUnitRunner.class)
public class StudentControllerTest {

    @InjectMocks
    private StudentController studentController;

    @Mock
    private StudentService studentService;

    @Test
    public void testGetAllStudents() {
        // Mock data
        List<Student> students = Arrays.asList(new Student(), new Student());

        // Mocking behavior of studentService.getAllStudents()
        when(studentService.getAllStudents()).thenReturn(students);

        // Perform the controller method
        ResponseEntity<List<Student>> response = studentController.getAllStudents();

        // Assertions
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(students, response.getBody());
    }

    @Test
    public void testGetStudentById() {
        Long studentId = 1L;
        Student student = new Student(); // Create a student object here

        // Mocking behavior of studentService.getStudentById()
        when(studentService.getStudentById(eq(studentId))).thenReturn(Optional.of(student));

        // Perform the controller method
        ResponseEntity<Student> response = studentController.getStudentById(studentId);

        // Assertions
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(student, response.getBody());
    }

    @Test
    public void testAddStudent() {
        // Create a sample student
        Student newStudent = new Student();
        newStudent.setId(1L);
        newStudent.setName("John Doe");

        // Mocking behavior of studentService.saveStudent()
        when(studentService.saveStudent(any(Student.class))).thenReturn(newStudent);

        // Perform the controller method
        ResponseEntity<Student> response = studentController.addStudent(newStudent);

        // Assertions
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertEquals(newStudent, response.getBody());
    }

    @Test
    public void testDeleteStudent() {
        Long studentId = 1L;

        // Perform the controller method
        ResponseEntity<Void> response = studentController.deleteStudent(studentId);

        // Assertions
        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
        verify(studentService, times(1)).deleteStudent(eq(studentId));
    }
}
